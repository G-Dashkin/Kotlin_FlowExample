Flows - позволяют создавать аснихронные потоки данных. Класс Flows может возвращать несколько объектов
по очереди или сразу (корутины позволяют возвращать одиночные значения), а также использовать операторы
преобразования данных типа .map{} и .filter{}
Flows использует паттерн наблюдатель, т.е. мы можем подписываться на обновление объекта данных и получать
их без блокирования основного потока приложения.
Основыные методы Emit - имитирование получения объектов в поток, Collect - получение объектов из потока
----------------------------------------------------------------------------------------------------
В работу Flow вовлечены три объекта:

Producer — производит (создает, испускает) данные в виде потока. Данные передаются в отдельном потоке
благодаря корутинам.

Intermediary (Посредник) — класс или классы, которые могут модифицировать или изменять данные, произведенные
Producer’ом. Обычно это какие-то вспомогательные классы или так называемые мапперы. Наличие посредников не
обязательно, если данные не нужно модифицировать или переводить их из одного типа в другой.

Consumer — получатель данных, произведённых Producer’ом.
____________________________________________________________________________________________________
По сути асинхронный поток - это объект Flow. Он типизируется типом тех данных, которые должны передаваться в потоке
fun getUsers(): Flow<String>

Для создания объекта Flow применяется специальная функция flow()
fun getUsers(): Flow<String> = flow {
    // создание асинхронного потока в функции flow
}